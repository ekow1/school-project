name: Complete Deployment Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'ai-backend/**'
      - '.github/workflows/deploy-pipeline.yml'
  workflow_dispatch:

jobs:
  setup-server:
    name: Setup Server Environment
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Verify repository structure
      run: |
        echo "üîç Repository structure:"
        ls -la
        echo "üîç AI Backend directory contents:"
        ls -la ai-backend/
        echo "üîç Checking if install-caddy.sh exists..."
        if [ -f "ai-backend/install-caddy.sh" ]; then
          echo "‚úÖ install-caddy.sh found"
        else
          echo "‚ùå install-caddy.sh not found"
          exit 1
        fi

    - name: Check if server is already set up
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AI_BACKEND_HOST }}
        username: ${{ secrets.AI_BACKEND_USER }}
        key: ${{ secrets.SP_SSH_KEY }}
        port: 22
        script: |
          echo "üîç Checking if server is already set up..."
          
          # Check if Node.js, PM2, and Caddy are installed
          if command -v node &> /dev/null && command -v npm &> /dev/null && command -v caddy &> /dev/null; then
            echo "‚úÖ Server is already set up!"
            echo "Node.js: $(node --version)"
            echo "npm: $(npm --version)"
            echo "Caddy: $(caddy version)"
            
            # Check if directories exist
            if [ -d "/opt/ai-backend" ] && [ -d "/var/log/ai-backend" ]; then
              echo "‚úÖ Required directories already exist"
              echo "‚úÖ Server setup complete - skipping installation"
              exit 0
            else
              echo "‚ö†Ô∏è Software installed but directories missing - creating them"
              sudo mkdir -p /opt/ai-backend /var/log/ai-backend
              sudo chown -R $USER:$USER /opt/ai-backend /var/log/ai-backend
              echo "‚úÖ Directories created - server setup complete"
              exit 0
            fi
          else
            echo "‚ùå Server not set up - proceeding with installation"
            exit 1
          fi

    - name: Upload and run Caddy installation script
      if: failure()
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.AI_BACKEND_HOST }}
        username: ${{ secrets.AI_BACKEND_USER }}
        key: ${{ secrets.SP_SSH_KEY }}
        port: 22
        source: "ai-backend/install-caddy.sh"
        target: "/home/${{ secrets.AI_BACKEND_USER }}/install-caddy.sh"

    - name: Run server setup script
      if: failure()
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AI_BACKEND_HOST }}
        username: ${{ secrets.AI_BACKEND_USER }}
        key: ${{ secrets.SP_SSH_KEY }}
        port: 22
        script: |
          chmod +x ~/install-caddy.sh
          ~/install-caddy.sh

          # Create app folder
          sudo mkdir -p /opt/ai-backend /var/log/ai-backend
          sudo chown -R $USER:$USER /opt/ai-backend /var/log/ai-backend

    - name: Update Caddy configuration for Swagger
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AI_BACKEND_HOST }}
        username: ${{ secrets.AI_BACKEND_USER }}
        key: ${{ secrets.SP_SSH_KEY }}
        port: 22
        script: |
          echo "üîÑ Updating Caddy configuration for Swagger docs..."
          
          # Update Caddyfile to include /api-docs routing
          sudo tee /etc/caddy/Caddyfile << 'EOF'
          ai.ekowlabs.space {
              # Try to proxy to backend first, fallback to status page
              @backend {
                  path /api/*
              }
              
              # Serve status page for root and non-API routes
              @status {
                  not path /api/*
                  not path /api-docs*
              }
              
              # Route API requests and docs to backend
              handle @backend {
                  reverse_proxy localhost:5000 {
                      health_uri /api/health
                      health_interval 10s
                      health_timeout 5s
                  }
              }
              
              # Route Swagger docs to backend
              handle /api-docs* {
                  reverse_proxy localhost:5000
              }
              
              # Serve status page for other routes
              handle @status {
                  root * /var/www/html
                  file_server
              }
          }
          EOF
          
          # Reload Caddy configuration
          sudo systemctl reload caddy
          echo "‚úÖ Caddy configuration updated and reloaded"

  deploy-app:
    name: Deploy AI Backend Application
    runs-on: ubuntu-latest
    needs: setup-server
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies locally
      run: |
        cd ai-backend
        npm ci

    - name: Create deployment package
      run: |
        mkdir -p deploy
        cp -r ai-backend/src deploy/
        cp ai-backend/package*.json deploy/

        # Create .env file
        cat > deploy/.env << EOF
        MONGODB_URI=${{ secrets.MONGODB_URI }}
        OPEN_ROUTER=${{ secrets.OPEN_ROUTER }}
        PORT=5000
        NODE_ENV=production
        EOF

        tar -czf ai-backend.tar.gz -C deploy .

    - name: Upload deployment package
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.AI_BACKEND_HOST }}
        username: ${{ secrets.AI_BACKEND_USER }}
        key: ${{ secrets.SP_SSH_KEY }}
        port: 22
        source: "ai-backend.tar.gz"
        target: "/opt/ai-backend/"

    - name: Extract and configure systemd service
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AI_BACKEND_HOST }}
        username: ${{ secrets.AI_BACKEND_USER }}
        key: ${{ secrets.SP_SSH_KEY }}
        port: 22
        script: |
          cd /opt/ai-backend
          tar -xzf ai-backend.tar.gz
          rm ai-backend.tar.gz

          # Create systemd service
          cat | sudo tee /etc/systemd/system/ai-backend.service << 'EOF'
          [Unit]
          Description=AI Backend Node.js Server
          After=network.target

          [Service]
          ExecStart=/usr/bin/node /opt/ai-backend/src/server.js
          Restart=always
          User=${{ secrets.AI_BACKEND_USER }}
          Environment=NODE_ENV=production
          Environment=PORT=5000
          Environment=MONGODB_URI=${{ secrets.MONGODB_URI }}
          Environment=OPEN_ROUTER=${{ secrets.OPEN_ROUTER }}
          WorkingDirectory=/opt/ai-backend
          StandardOutput=file:/var/log/ai-backend/out.log
          StandardError=file:/var/log/ai-backend/error.log

          [Install]
          WantedBy=multi-user.target
          EOF

          # Enable and start service
          sudo systemctl daemon-reload
          sudo systemctl enable ai-backend
          sudo systemctl restart ai-backend
          sudo systemctl status ai-backend --no-pager

    - name: Health check
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AI_BACKEND_HOST }}
        username: ${{ secrets.AI_BACKEND_USER }}
        key: ${{ secrets.SP_SSH_KEY }}
        port: 22
        script: |
          sleep 10
          if systemctl is-active --quiet ai-backend; then
            echo "‚úÖ Application is running successfully!"
          else
            echo "‚ùå Application failed to start"
            sudo journalctl -u ai-backend --no-pager -n 50
            exit 1
          fi
          if curl -f -s http://localhost:5000/ > /dev/null; then
            echo "‚úÖ API is responding"
          else
            echo "‚ö†Ô∏è API not responding yet"
          fi
