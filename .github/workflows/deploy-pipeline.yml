name: Complete Deployment Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  setup-server:
    name: Setup Server Environment
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Verify repository structure
      run: |
        echo "üîç Repository structure:"
        ls -la
        echo "üîç AI Backend directory contents:"
        ls -la ai-backend/
        echo "üîç Checking if install-caddy.sh exists..."
        if [ -f "ai-backend/install-caddy.sh" ]; then
          echo "‚úÖ install-caddy.sh found"
        else
          echo "‚ùå install-caddy.sh not found"
          exit 1
        fi

    - name: Upload and run Caddy installation script
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.AI_BACKEND_HOST }}
        username: ${{ secrets.AI_BACKEND_USER }}
        key: ${{ secrets.SP_SSH_KEY }}
        port: 22
        source: "ai-backend/install-caddy.sh"
        target: "/home/${{ secrets.AI_BACKEND_USER }}/install-caddy.sh"

    - name: Run server setup script
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AI_BACKEND_HOST }}
        username: ${{ secrets.AI_BACKEND_USER }}
        key: ${{ secrets.SP_SSH_KEY }}
        port: 22
        script: |
          chmod +x ~/install-caddy.sh
          ~/install-caddy.sh

          # Create app folder
          sudo mkdir -p /opt/ai-backend /var/log/ai-backend
          sudo chown -R $USER:$USER /opt/ai-backend /var/log/ai-backend

  deploy-app:
    name: Deploy AI Backend Application
    runs-on: ubuntu-latest
    needs: setup-server
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies locally
      run: |
        cd ai-backend
        npm ci

    - name: Create deployment package
      run: |
        mkdir -p deploy
        cp -r ai-backend/src deploy/
        cp ai-backend/package*.json deploy/

        # Create .env file
        cat > deploy/.env << EOF
        MONGODB_URI=${{ secrets.MONGODB_URI }}
        OPEN_ROUTER=${{ secrets.OPEN_ROUTER }}
        PORT=5000
        NODE_ENV=production
        EOF

        tar -czf ai-backend.tar.gz -C deploy .

    - name: Upload deployment package
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.AI_BACKEND_HOST }}
        username: ${{ secrets.AI_BACKEND_USER }}
        key: ${{ secrets.SP_SSH_KEY }}
        port: 22
        source: "ai-backend.tar.gz"
        target: "/opt/ai-backend/"

    - name: Extract and configure systemd service
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AI_BACKEND_HOST }}
        username: ${{ secrets.AI_BACKEND_USER }}
        key: ${{ secrets.SP_SSH_KEY }}
        port: 22
        script: |
          cd /opt/ai-backend
          tar -xzf ai-backend.tar.gz
          rm ai-backend.tar.gz

          # Create systemd service
          cat | sudo tee /etc/systemd/system/ai-backend.service << 'EOF'
          [Unit]
          Description=AI Backend Node.js Server
          After=network.target

          [Service]
          ExecStart=/usr/bin/node /opt/ai-backend/src/server.js
          Restart=always
          User=${{ secrets.AI_BACKEND_USER }}
          Environment=NODE_ENV=production
          Environment=PORT=5000
          Environment=MONGODB_URI=${{ secrets.MONGODB_URI }}
          Environment=OPEN_ROUTER=${{ secrets.OPEN_ROUTER }}
          WorkingDirectory=/opt/ai-backend
          StandardOutput=file:/var/log/ai-backend/out.log
          StandardError=file:/var/log/ai-backend/error.log

          [Install]
          WantedBy=multi-user.target
          EOF

          # Enable and start service
          sudo systemctl daemon-reload
          sudo systemctl enable ai-backend
          sudo systemctl restart ai-backend
          sudo systemctl status ai-backend --no-pager

    - name: Health check
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AI_BACKEND_HOST }}
        username: ${{ secrets.AI_BACKEND_USER }}
        key: ${{ secrets.SP_SSH_KEY }}
        port: 22
        script: |
          sleep 10
          if systemctl is-active --quiet ai-backend; then
            echo "‚úÖ Application is running successfully!"
          else
            echo "‚ùå Application failed to start"
            sudo journalctl -u ai-backend --no-pager -n 50
            exit 1
          fi
          if curl -f -s http://localhost:5000/ > /dev/null; then
            echo "‚úÖ API is responding"
          else
            echo "‚ö†Ô∏è API not responding yet"
          fi
