name: Complete Deployment Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  setup-server:
    name: Setup Server Environment
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Prepare Caddy installer
      run: |
        cd ai-backend
        chmod +x install-caddy.sh
        tar -czf install-caddy.tar.gz install-caddy.sh

    - name: Upload Caddy installation script
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.AI_BACKEND_HOST }}
        username: ${{ secrets.AI_BACKEND_USER }}
        key: ${{ secrets.SP_SSH_KEY }}
        port: 22
        source: "ai-backend/install-caddy.tar.gz"
        target: "/home/${{ secrets.AI_BACKEND_USER }}/install-caddy.tar.gz"

    - name: Run Caddy installation script
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AI_BACKEND_HOST }}
        username: ${{ secrets.AI_BACKEND_USER }}
        key: ${{ secrets.SP_SSH_KEY }}
        port: 22
        script: |
          cd ~
          echo "🔍 Checking for install-caddy.tar.gz..."
          ls -la
          
          if [ ! -f install-caddy.tar.gz ]; then
            echo "❌ install-caddy.tar.gz not found in $(pwd)"
            echo "📁 Contents of current directory:"
            ls -la
            exit 1
          fi
          
          echo "📦 Extracting install-caddy.tar.gz..."
          tar -xzf install-caddy.tar.gz
          rm install-caddy.tar.gz
          
          echo "🔍 Checking extracted files..."
          ls -la
          
          if [ ! -f install-caddy.sh ]; then
            echo "❌ install-caddy.sh not found after extraction"
            echo "📁 Contents of current directory:"
            ls -la
            exit 1
          fi
          
          echo "🔧 Making install-caddy.sh executable..."
          chmod +x install-caddy.sh
          
          echo "🚀 Running install-caddy.sh..."
          ./install-caddy.sh

          # Create app directory
          sudo mkdir -p /opt/ai-backend /var/log/pm2
          sudo chown -R $USER:$USER /opt/ai-backend /var/log/pm2

          echo "✅ Server environment setup completed"

  deploy-app:
    name: Deploy AI Backend Application
    runs-on: ubuntu-latest
    needs: setup-server
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.21.0'
        cache: 'npm'
        cache-dependency-path: 'ai-backend/package-lock.json'
        
    - name: Install dependencies
      run: |
        cd ai-backend
        npm ci
        
    - name: Run tests (if any)
      run: |
        cd ai-backend
        npm test || echo "No tests found, continuing..."
      
    - name: Create deployment package
      run: |
        # Create deployment directory
        mkdir -p deploy
        
        # Copy necessary files from ai-backend folder
        cp -r ai-backend/src deploy/
        cp ai-backend/package*.json deploy/
        
        # Create production ecosystem file
        cat > deploy/ecosystem.config.js << 'EOF'
        module.exports = {
          apps: [{
            name: 'ai-backend',
            script: 'src/server.js',
            instances: 1,
            autorestart: true,
            watch: false,
            max_memory_restart: '1G',
            env: {
              NODE_ENV: 'production',
              PORT: 5000,
              MONGODB_URI: process.env.MONGODB_URI,
              OPEN_ROUTER: process.env.OPEN_ROUTER
            },
            error_file: '/var/log/pm2/ai-backend-error.log',
            out_file: '/var/log/pm2/ai-backend-out.log',
            log_file: '/var/log/pm2/ai-backend.log'
          }]
        };
        EOF
        
        # Create .env file for production
        cat > deploy/.env << EOF
        MONGODB_URI=${{ secrets.MONGODB_URI }}
        OPEN_ROUTER=${{ secrets.OPEN_ROUTER }}
        PORT=5000
        NODE_ENV=production
        EOF
        
        # Create deployment script
        cat > deploy/deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "🚀 Starting backend deployment..."
        
        # Install dependencies
        echo "📦 Installing dependencies..."
        npm ci --production
        
        # Stop existing PM2 process if running
        echo "🔄 Stopping existing process..."
        pm2 stop ai-backend 2>/dev/null || true
        pm2 delete ai-backend 2>/dev/null || true
        
        # Start the application
        echo "▶️ Starting application..."
        pm2 start ecosystem.config.js
        
        # Save PM2 configuration
        pm2 save
        
        # Show status
        pm2 status
        
        echo "✅ Backend deployment completed!"
        echo "🌍 Your API is available at: https://ai.ekowlabs.space/api/"
        echo "📊 Status page: https://ai.ekowlabs.space"
        EOF
        
        chmod +x deploy/deploy.sh
        
        # Create tar archive
        tar -czf ai-backend.tar.gz -C deploy .
        
    - name: Upload and deploy application
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.AI_BACKEND_HOST }}
        username: ${{ secrets.AI_BACKEND_USER }}
        key: ${{ secrets.SP_SSH_KEY }}
        port: 22
        source: "ai-backend.tar.gz"
        target: "/opt/ai-backend/"
        
    - name: Extract and start application
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AI_BACKEND_HOST }}
        username: ${{ secrets.AI_BACKEND_USER }}
        key: ${{ secrets.SP_SSH_KEY }}
        port: 22
        script: |
          cd /opt/ai-backend
          
          # Extract files
          echo "📦 Extracting deployment package..."
          tar -xzf ai-backend.tar.gz
          rm ai-backend.tar.gz
          
          # Run deployment script
          echo "🚀 Starting application deployment..."
          ./deploy.sh
          
    - name: Health check
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AI_BACKEND_HOST }}
        username: ${{ secrets.AI_BACKEND_USER }}
        key: ${{ secrets.SP_SSH_KEY }}
        port: 22
        script: |
          # Wait a moment for the app to start
          sleep 10
          
          # Check if PM2 process is running
          if pm2 list | grep -q "ai-backend.*online"; then
            echo "✅ Application is running successfully!"
            pm2 status
          else
            echo "❌ Application failed to start"
            pm2 logs ai-backend --lines 50
            exit 1
          fi
          
          # Test API endpoint
          echo "🔍 Testing API endpoint..."
          if curl -f -s http://localhost:5000/ > /dev/null; then
            echo "✅ API is responding"
          else
            echo "⚠️ API not responding yet (this is normal if backend is still starting)"
          fi
          
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "🎉 Deployment successful!"
          echo "🌍 Your API is available at: https://ai.ekowlabs.space/api/"
          echo "📊 Status page: https://ai.ekowlabs.space"
        else
          echo "❌ Deployment failed!"
        fi
