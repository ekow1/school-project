name: Deploy Auth Backend

on:
  push:
    branches: [ main ]
    paths:
      - 'rn-auth-backend/**'
      - '.github/workflows/deploy-auth-backend.yml'  # Temporarily enabled for testing
  workflow_dispatch:

jobs:
  setup-server:
    name: Setup Auth Server Environment
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Verify repository structure
      run: |
        echo "üîç Repository structure:"
        ls -la
        echo "üîç Auth Backend directory contents:"
        ls -la rn-auth-backend/
        echo "üîç Checking if install.sh exists..."
        if [ -f "rn-auth-backend/install.sh" ]; then
          echo "‚úÖ install.sh found"
        else
          echo "‚ùå install.sh not found"
          exit 1
        fi

    - name: Check if server is already set up
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AUTH_HOST }}
        username: ${{ secrets.AI_BACKEND_USER }}
        key: ${{ secrets.SP_SSH_KEY }}
        port: 22
        script: |
          echo "üîç Checking if server is already set up..."
          
          # Check if Node.js and Caddy are installed
          if command -v node &> /dev/null && command -v npm &> /dev/null && command -v caddy &> /dev/null; then
            echo "‚úÖ Server is already set up!"
            echo "Node.js: $(node --version)"
            echo "npm: $(npm --version)"
            echo "Caddy: $(caddy version)"
            
            # Clean up any PM2 processes if they exist
            if command -v pm2 &> /dev/null; then
              echo "‚ö†Ô∏è Cleaning up old PM2 process..."
              pm2 delete auth-backend 2>/dev/null || true
              pm2 save --force 2>/dev/null || true
            fi
            
            echo "‚úÖ Server setup complete - skipping installation"
            exit 0
          else
            echo "‚ùå Server not set up - proceeding with installation"
            exit 1
          fi

    - name: Upload and run installation script
      if: failure()
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.AUTH_HOST }}
        username: ${{ secrets.AI_BACKEND_USER }}
        key: ${{ secrets.SP_SSH_KEY }}
        port: 22
        source: "rn-auth-backend/install.sh"
        target: "/home/${{ secrets.AI_BACKEND_USER }}/install-auth.sh"

    - name: Run server setup script
      if: failure()
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AUTH_HOST }}
        username: ${{ secrets.AI_BACKEND_USER }}
        key: ${{ secrets.SP_SSH_KEY }}
        port: 22
        script: |
          chmod +x ~/install-auth.sh/rn-auth-backend/install.sh
          ~/install-auth.sh/rn-auth-backend/install.sh

    - name: Update Caddy configuration
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AUTH_HOST }}
        username: ${{ secrets.AI_BACKEND_USER }}
        key: ${{ secrets.SP_SSH_KEY }}
        port: 22
        script: |
          echo "üîÑ Verifying Caddy configuration for auth.ekowlabs.space..."
          
          # Verify Caddyfile exists and has correct configuration
          if ! grep -q "auth.ekowlabs.space" /etc/caddy/Caddyfile; then
            echo "‚ö†Ô∏è Updating Caddy configuration..."
            
            sudo tee /etc/caddy/Caddyfile << 'EOF'
          auth.ekowlabs.space {
              # Try to proxy to backend first, fallback to status page
              @backend {
                  path /api/*
              }
              
              # Serve status page for root and non-API routes
              @status {
                  not path /api/*
                  not path /api-docs*
              }
              
              # Route API requests to backend
              handle @backend {
                  reverse_proxy localhost:5000 {
                      health_uri /api/health
                      health_interval 10s
                      health_timeout 5s
                  }
              }
              
              # Route Swagger docs to backend
              handle /api-docs* {
                  reverse_proxy localhost:5000
              }
              
              # Serve status page for other routes
              handle @status {
                  root * /var/www/status
                  file_server
              }
              
              # Enable gzip compression
              encode gzip
              
              # Add security headers
              header {
                  # Enable HSTS
                  Strict-Transport-Security "max-age=31536000; includeSubDomains"
                  # Prevent clickjacking
                  X-Frame-Options "SAMEORIGIN"
                  # Prevent MIME type sniffing
                  X-Content-Type-Options "nosniff"
                  # XSS protection
                  X-XSS-Protection "1; mode=block"
                  # CORS headers for React Native/Expo mobile app
                  Access-Control-Allow-Origin "*"
                  Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
                  Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With, Accept, Origin"
              }
              
              # Log requests
              log {
                  output file /var/log/caddy/access.log
              }
              
              # Handle preflight requests
              @options {
                  method OPTIONS
              }
              respond @options 200
          }
          EOF
            
            # Reload Caddy configuration
            sudo systemctl reload caddy
            echo "‚úÖ Caddy configuration updated and reloaded"
          else
            echo "‚úÖ Caddy configuration already correct"
          fi

  deploy-app:
    name: Deploy Auth Backend Application
    runs-on: ubuntu-latest
    needs: setup-server
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create deployment package
      run: |
        # Create .env file in rn-auth-backend directory
        cat > rn-auth-backend/.env << EOF
        MONGODB_URI=${{ secrets.MONGODB_URI }}
        PORT=5000
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        ARKSEND=${{ secrets.ARKSEND }}
        NODE_ENV=production
        EOF

        # Create logs directory
        mkdir -p rn-auth-backend/logs
        
        # Remove PM2 config (not needed with systemd)
        rm -f rn-auth-backend/ecosystem.config.cjs

        # Create tarball of entire rn-auth-backend directory
        tar -czf auth-backend.tar.gz rn-auth-backend/

    - name: Upload deployment package
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.AUTH_HOST }}
        username: ${{ secrets.AI_BACKEND_USER }}
        key: ${{ secrets.SP_SSH_KEY }}
        port: 22
        source: "auth-backend.tar.gz"
        target: "/tmp/"

    - name: Extract and deploy application
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AUTH_HOST }}
        username: ${{ secrets.AI_BACKEND_USER }}
        key: ${{ secrets.SP_SSH_KEY }}
        port: 22
        script: |
          echo "üìÅ Creating backend directory..."
          mkdir -p ~/school-project/backend
          cd ~/school-project/backend
          
          echo "üì¶ Extracting deployment package..."
          tar -xzf /tmp/auth-backend.tar.gz
          rm /tmp/auth-backend.tar.gz
          
          echo "üìã Directory structure:"
          ls -la
          
          echo "üìÇ Entering rn-auth-backend..."
          cd rn-auth-backend
          
          echo "üìã Application files:"
          ls -la
          
          echo "üìã Checking key files..."
          if [ -f "server.js" ]; then
            echo "‚úÖ server.js found"
          else
            echo "‚ùå server.js NOT found!"
            exit 1
          fi
          
          if [ -f ".env" ]; then
            echo "‚úÖ .env found"
          else
            echo "‚ùå .env NOT found!"
            exit 1
          fi

          echo "üì¶ Installing production dependencies..."
          npm install --production

          echo "üîç Verifying environment variables..."
          echo "MONGODB_URI: ${MONGODB_URI:0:20}..."
          echo "JWT_SECRET: ${JWT_SECRET:0:10}..."
          echo "ARKSEND: ${ARKSEND:0:10}..."

          echo "üîÑ Creating systemd service..."
          
          # Get current user and home directory
          CURRENT_USER=$(whoami)
          HOME_DIR=$(eval echo ~$CURRENT_USER)
          
          # Create systemd service file
          sudo tee /etc/systemd/system/auth-backend.service << EOF
          [Unit]
          Description=Auth Backend Node.js Server
          After=network.target

          [Service]
          ExecStart=/usr/bin/node ${HOME_DIR}/school-project/backend/rn-auth-backend/server.js
          Restart=always
          RestartSec=5
          User=${CURRENT_USER}
          EnvironmentFile=${HOME_DIR}/school-project/backend/rn-auth-backend/.env
          WorkingDirectory=${HOME_DIR}/school-project/backend/rn-auth-backend
          StandardOutput=append:${HOME_DIR}/school-project/backend/rn-auth-backend/logs/out.log
          StandardError=append:${HOME_DIR}/school-project/backend/rn-auth-backend/logs/err.log

          [Install]
          WantedBy=multi-user.target
          EOF

          echo "üìã Generated systemd service file:"
          cat /etc/systemd/system/auth-backend.service

          echo "üîÑ Reloading systemd and restarting service..."
          sudo systemctl daemon-reload
          sudo systemctl enable auth-backend
          sudo systemctl restart auth-backend
          
          echo "‚è≥ Waiting for service to start..."
          sleep 5
          
          echo "‚úÖ Deployment completed successfully!"
          
          echo "üìä Service status:"
          sudo systemctl status auth-backend --no-pager

    - name: Health check
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AUTH_HOST }}
        username: ${{ secrets.AI_BACKEND_USER }}
        key: ${{ secrets.SP_SSH_KEY }}
        port: 22
        script: |
          cd ~/school-project/backend/rn-auth-backend
          
          echo "üîç Checking .env file..."
          if [ -f ".env" ]; then
            echo "‚úÖ .env exists"
            echo "Environment variables (masked):"
            cat .env | sed 's/=.*/=***MASKED***/g'
          else
            echo "‚ùå .env missing!"
          fi
          
          echo ""
          echo "üîç Waiting for application to start..."
          sleep 10
          
          echo ""
          echo "üìä Systemd Service Status:"
          sudo systemctl status auth-backend --no-pager
          
          echo ""
          echo "üìù Error Logs (last 50 lines):"
          cat logs/err.log | tail -50 || echo "No error log"
          
          echo ""
          echo "üìù Output Logs (last 50 lines):"
          cat logs/out.log | tail -50 || echo "No output log"
          
          echo ""
          echo "üìù Systemd Journal (last 30 lines):"
          sudo journalctl -u auth-backend -n 30 --no-pager
          
          echo ""
          # Check if service is active
          if sudo systemctl is-active --quiet auth-backend; then
            echo "‚úÖ Service is running"
          else
            echo "‚ùå Service is not running"
            exit 1
          fi
          
          # Check if API is responding
          if curl -f -s http://localhost:5000/api/health > /dev/null; then
            echo "‚úÖ API is responding"
            curl -s http://localhost:5000/api/health | jq '.'
          else
            echo "‚ùå API not responding"
            echo "Check logs above for the error"
            exit 1
          fi

    - name: Deployment Summary
      if: always()
      run: |
        echo "üìä Deployment Summary"
        echo "===================="
        echo "üåê Domain: https://auth.ekowlabs.space"
        echo "üìç API Base: https://auth.ekowlabs.space/api"
        echo "üìö API Docs: https://auth.ekowlabs.space/api-docs"
        echo ""
        echo "üîó Endpoints:"
        echo "  ‚Ä¢ POST /api/auth/register - Register new user"
        echo "  ‚Ä¢ POST /api/auth/login - Login user"
        echo "  ‚Ä¢ GET /api/profile - Get user profile (requires auth)"
        echo "  ‚Ä¢ GET /api/health - Health check"
        echo ""
        echo "üîß Service Management:"
        echo "  ‚Ä¢ sudo systemctl status auth-backend - Check status"
        echo "  ‚Ä¢ sudo systemctl restart auth-backend - Restart service"
        echo "  ‚Ä¢ sudo systemctl stop auth-backend - Stop service"
        echo "  ‚Ä¢ sudo journalctl -u auth-backend -f - View logs"

